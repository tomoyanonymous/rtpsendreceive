name: release
on:
  push:
      tags: 
        - 'v*'

jobs:
  create_release:
    name: "Create Release"
    runs-on : ubuntu-20.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2
      - name: Create Source Release
        id: create_release
        uses: actions/create-release@v1.0.0
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false 

  build_and_upload:
    name: "Build and Release"
    needs: create_release
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - windows-latest
        config:
          - Release
        include:
          - os: windows-latest
            vcpkg-target-triplet: x64-windows-static-rel
            cache-path: \vcpkg\installed
            zip_postfix: Windows
          - os: macos-latest
            vcpkg-target-triplet: x64-osx-rel
            cache-path: /vcpkg/installed
            zip_postfix: macOS

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: actions/cache@v2
        id: ffmpeg-cache
        with:
          path: ${{ github.workspace }}${{ matrix.cache-path }}
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg/ports/ffmpeg/CONTROL') }}
      - if: contains(matrix.os, 'windows')
        name: Install ffmpeg via vcpkg
        run: |
          cp .\vcpkg-helper\${{ matrix.vcpkg-target-triplet }}.cmake .\vcpkg\triplets\
          .\vcpkg\bootstrap-vcpkg.bat 
          .\vcpkg\vcpkg.exe install ffmpeg[avformat,avdevice,avcodec,core]:x64-windows-static-rel
      - if: contains(matrix.os, 'macos') 
        name: Install ffmpeg via vcpkg(macos)
        run: |
          cp ./vcpkg-helper/${{ matrix.vcpkg-target-triplet }}.cmake ./vcpkg/triplets/
          brew upgrade
          brew install yasm
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install ffmpeg[avformat,avdevice,avcodec,core]:${{ matrix.vcpkg-target-triplet }}
      - name: configure project
        run: cmake -B build -DCMAKE_BUILD_CONFIG=${{ matrix.config }} . -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg-target-triplet }}
      - name: build
        run: cmake --build build --config ${{ matrix.config }} -v
        
      - name: install
        run: | 
          cmake -E make_directory mc.rtpsendreceive
          cmake -R copy_directory docs  mc.rtpsendreceive/docs
          cmake -R copy_directory externals  mc.rtpsendreceive/externals
          cmake -R copy_directory help  mc.rtpsendreceive/help
          cmake -E copy  CHANGELOG.md package-info.json ReadMe.md screenshot.jpg License.md mc.rtpsendreceive

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        shell: bash

      - uses: papeloto/action-zip@v1
        with:
          files: mc.rtpsendreceive
          dest: rtpsendreceive-${{ steps.get_version.outputs.VERSION }}-binary-${{ matrix.zip_postfix }}.zip

      - name: Upload Compiled Binary
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./rtpsendreceive-${{ steps.get_version.outputs.VERSION }}-binary-${{ matrix.zip_postfix }}.zip
          asset_name: rtpsendreceive-${{ steps.get_version.outputs.VERSION }}-binary-${{ matrix.zip_postfix }}.zip
          asset_content_type: application/zip

  